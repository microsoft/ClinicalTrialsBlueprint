{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "serviceName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 17
    },
    "accountId": {
      "type": "string"
    },
    "isLiveId": { 
      "type": "bool",
      "defaultValue": false
    },
    "functionalTestsFileUrl": {
      "type": "string"
    },
    "resourceTags": {
      "type": "object",
      "defaultValue": {
        "Environment": "Prod",
        "Project": "FHIR Server"
      }
    }
  },
  "variables": {
    "structuringName": "[concat(parameters('serviceName'),'-ctm-struct-aci')]",
    "gatewayWebAppName": "[concat(parameters('serviceName'),'-gateway-webapp')]",
    "disqualificationWebAppName": "[concat(parameters('serviceName'),'-ctm-disq-webapp')]",
    "sechedulerLogicAppName": "[concat(parameters('serviceName'),'-secheduler-logic-app')]",
    "structurerLogicAppName": "[concat(parameters('serviceName'),'-structurer-logic-app')]",
    "finisherLogicAppName": "[concat(parameters('serviceName'),'-finisher-logic-app')]",
    "funcTestsAppName": "[concat(parameters('serviceName'),'-ctm-func-tests-webapp')]",
    // Reference to workflow
    "workflows_structurer_logic_app": "[concat(subscription().id,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Logic/workflows/', variables('structurerLogicAppName'))]",
    "userName": "[if(parameters('isLiveId'), concat('live.com#', parameters('accountId')), parameters('accountId'))]",
    "connections_arm_externalid": "[concat(subscription().id,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Web/connections/arm')]",
    "connections_office365_externalid": "[concat(subscription().id,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Web/connections/office365')]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "arm",
      "tags": "[parameters('resourceTags')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "displayName": "[variables('userName')]",
        "customParameterValues": {
        },
        "api": {
          "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/arm')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "office365",
      "tags": "[parameters('resourceTags')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "displayName": "[variables('userName')]",
        "customParameterValues": {
        },
        "api": {
          "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/office365')]"
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "tags": "[parameters('resourceTags')]",
      "name": "[variables('sechedulerLogicAppName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Logic/workflows', variables('structurerLogicAppName'))]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
          },
          "triggers": {
            "Recurrence": {
              "recurrence": {
                "frequency": "Day",
                "interval": 1,
                "schedule": {
                  "hours": [
                    "12"
                  ]
                }
              },
              "type": "Recurrence"
            }
          },
          "actions": {
            "[variables('structurerLogicAppName')]": {
              "runAfter": {
              },
              "type": "Workflow",
              "inputs": {
                "headers": {
                  "content-type": "application/json"
                },
                "host": {
                  "triggerName": "manual",
                  "workflow": {
                    "id": "[variables('workflows_structurer_logic_app')]"
                  }
                }
              }
            }
          },
          "outputs": {
          }
        },
        "parameters": {
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[variables('structurerLogicAppName')]",
      "location": "[resourceGroup().location]",
      "tags": "[parameters('resourceTags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections','arm')]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {
              },
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                }
              }
            }
          },
          "actions": {
            "Get_Staging_slot": {
              "runAfter": {
                "Initialize_structuring_aci_service_variable": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "method": "GET",
                "uri": "[concat('https://',variables('gatewayWebAppName'),'.azurewebsites.net/slot')]"
              }
            },
            "Initialize_Structuring_Secondary_Service_variable": {
              "runAfter": {
                "Initialize_aciPostfix": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "structuringAciSecondaryService",
                    "type": "string",
                    "value": "@{concat(variables('structuringAciService'),variables('aciPostfix'))}"
                  }
                ]
              }
            },
            "Initialize_aciPostfix": {
              "runAfter": {
                "Parse_Slot_Response": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "aciPostfix",
                    "type": "string",
                    "value": "@{if(equals(body('Parse_Slot_Response')?['slot'], 'primary'), '-s', '')}"
                  }
                ]
              }
            },
            "Initialize_structuring_aci_service_variable": {
              "runAfter": {
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "structuringAciService",
                    "type": "string",
                    "value": "[variables('structuringName')]"
                  }
                ]
              }
            },
            "Parse_ACI_status_JSON": {
              "inputs": {
                "content": "@body('Read_current_ACI_resource_status')?['properties']",
                "schema": {
                  "properties": {
                    "instanceView": {
                      "properties": {
                        "state": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "runAfter": {
                "Read_current_ACI_resource_status": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson"
            },
            "Parse_Slot_Response": {
              "runAfter": {
                "Get_Staging_slot": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@body('Get_Staging_slot')",
                "schema": {
                  "properties": {
                    "slot": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "Read_current_ACI_resource_status": {
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['arm']['connectionId']"
                  }
                },
                "method": "get",
                "path": "[concat('/subscriptions/@{encodeURIComponent(''',subscription().subscriptionId,''')}/resourcegroups/@{encodeURIComponent(''',resourceGroup().name,''')}/providers/@{encodeURIComponent(''Microsoft.ContainerInstance'')}/@{encodeURIComponent(concat(''containerGroups/'', variables(''structuringAciSecondaryService'')))}')]",
                "queries": {
                  "x-ms-api-version": "2018-10-01"
                }
              },
              "runAfter": {
                "Initialize_Structuring_Secondary_Service_variable": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection"
            },
            "Response_-_200_OK": {
              "inputs": {
                "statusCode": 200
              },
              "kind": "http",
              "runAfter": {
                "Verify_ACI_is_Stopped": [
                  "Succeeded"
                ]
              },
              "type": "Response"
            },
            "Verify_ACI_is_Stopped": {
              "actions": {
                "Start_structuring_service": {
                  "runAfter": {
                    "Stop_structuring_service": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['arm']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "[concat('/subscriptions/@{encodeURIComponent(''',subscription().subscriptionId,''')}/resourcegroups/@{encodeURIComponent(''',resourceGroup().name,''')}/providers/@{encodeURIComponent(''Microsoft.ContainerInstance'')}/@{encodeURIComponent(concat(''containerGroups/'', variables(''structuringAciSecondaryService'')))}/@{encodeURIComponent(''start'')}')]",
                    "queries": {
                      "x-ms-api-version": "2018-10-01"
                    }
                  }
                },
                "Stop_structuring_service": {
                  "runAfter": {
                  },
                  "type": "ApiConnection",
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['arm']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "[concat('/subscriptions/@{encodeURIComponent(''',subscription().subscriptionId,''')}/resourcegroups/@{encodeURIComponent(''',resourceGroup().name,''')}/providers/@{encodeURIComponent(''Microsoft.ContainerInstance'')}/@{encodeURIComponent(concat(''containerGroups/'', variables(''structuringAciSecondaryService'')))}/@{encodeURIComponent(''stop'')}')]",
                    "queries": {
                      "x-ms-api-version": "2018-10-01"
                    }
                  }
                }
              },
              "else": {
                "actions": {
                  "Send_a_failure_email": {
                    "inputs": {
                      "body": {
                        "Body": "<p>Structuring process is already running.</p>",
                        "Subject": "[concat('[', parameters('serviceName'), '] ', 'Trials structuring process aborted')]",
                        "To": "[parameters('accountId')]"
                      },
                      "host": {
                        "connection": {
                          "name": "@parameters('$connections')['office365']['connectionId']"
                        }
                      },
                      "method": "post",
                      "path": "/v2/Mail"
                    },
                    "runAfter": {
                    },
                    "type": "ApiConnection"
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@body('Parse_ACI_status_JSON')?['instanceView']?['state']",
                      "Stopped"
                    ]
                  }
                ]
              },
              "runAfter": {
                "Parse_ACI_status_JSON": [
                  "Succeeded"
                ]
              },
              "type": "If"
            }
          },
          "outputs": {
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "arm": {
                "connectionId": "[variables('connections_arm_externalid')]",
                "connectionName": "arm",
                "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', resourceGroup().location,'/managedApis/arm')]"
              },
              "office365": {
                "connectionId": "[variables('connections_office365_externalid')]",
                "connectionName": "office365",
                "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', resourceGroup().location,'/managedApis/office365')]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "tags": "[parameters('resourceTags')]",
      "name": "[variables('finisherLogicAppName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections','arm')]",
        "[resourceId('Microsoft.Web/connections','office365')]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {
              },
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "properties": {
                    "AddedTrials": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "BuildVersion": {
                      "type": "string"
                    },
                    "FailedTrials": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "FailureMessage": {
                      "type": "string"
                    },
                    "ProcessedTrials": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "RemovedTrials": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "Success": {
                      "type": "boolean"
                    },
                    "TimePassed": {
                      "type": "string"
                    },
                    "UpdatedTrials": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Get_Staging_slot": {
              "inputs": {
                "method": "GET",
                "uri": "[concat('https://', variables('gatewayWebAppName'),'.azurewebsites.net/slot')]"
              },
              "runAfter": {
                "Initialize_slotSwapBody_variable": [
                  "Succeeded"
                ]
              },
              "type": "Http"
            },
            "Initialize_disqualifierSecondaryService_variable": {
              "inputs": {
                "variables": [
                  {
                    "name": "disqualifierSecondaryService",
                    "type": "string"
                  }
                ]
              },
              "runAfter": {
                "Initialize_disqualifierService_variable": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Initialize_disqualifierService_variable": {
              "inputs": {
                "variables": [
                  {
                    "name": "disqualifierService",
                    "type": "string",
                    "value": "[variables('disqualificationWebAppName')]"
                  }
                ]
              },
              "runAfter": {
                "Initialize_structuringSecondaryAci_variable": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Initialize_readiness_variable": {
              "inputs": {
                "variables": [
                  {
                    "name": "readiness",
                    "type": "string"
                  }
                ]
              },
              "runAfter": {
                "Initialize_disqualifierSecondaryService_variable": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Initialize_servicePostfix_variable": {
              "inputs": {
                "variables": [
                  {
                    "name": "servicePostfix",
                    "type": "string"
                  }
                ]
              },
              "runAfter": {
                "Initialize_structuringSummary_variable": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Initialize_slotSwapBody_variable": {
              "inputs": {
                "variables": [
                  {
                    "name": "slotSwapBody",
                    "type": "object",
                    "value": {
                      "preserveVnet": true,
                      "targetSlot": "secondary"
                    }
                  }
                ]
              },
              "runAfter": {
                "Initialize_readiness_variable": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Initialize_structuringAci_variable": {
              "inputs": {
                "variables": [
                  {
                    "name": "structuringAci",
                    "type": "string",
                    "value": "[variables('structuringName')]"
                  }
                ]
              },
              "runAfter": {
                "Initialize_servicePostfix_variable": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Initialize_structuringSecondaryAci_variable": {
              "inputs": {
                "variables": [
                  {
                    "name": "structuringSecondaryAci",
                    "type": "string"
                  }
                ]
              },
              "runAfter": {
                "Initialize_structuringAci_variable": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Initialize_structuringSummary_variable": {
              "inputs": {
                "variables": [
                  {
                    "name": "structuringSummary",
                    "type": "object",
                    "value": {
                      "added": "@if(equals(triggerBody()?['AddedTrials'], null), 0, length(triggerBody()?['AddedTrials']))",
                      "buildVersion": "@triggerBody()?['BuildVersion']",
                      "failed": "@if(equals(triggerBody()?['FailedTrials'], null), 0, length(triggerBody()?['FailedTrials']))",
                      "failureMessage": "@triggerBody()?['FailureMessage']",
                      "processed": "@if(equals(triggerBody()?['ProcessedTrials'], null), 0, length(triggerBody()?['ProcessedTrials']))",
                      "removed": "@if(equals(triggerBody()?['RemovedTrials'], null), 0, length(triggerBody()?['RemovedTrials']))",
                      "success": "@triggerBody()?['Success']",
                      "timePassed": "@triggerBody()?['TimePassed']",
                      "updated": "@if(equals(triggerBody()?['UpdatedTrials'], null), 0, length(triggerBody()?['UpdatedTrials']))"
                    }
                  }
                ]
              },
              "runAfter": {
              },
              "type": "InitializeVariable"
            },
            "Is_structuring_successful": {
              "actions": {
                "Is_Service_Ready": {
                  "actions": {
                    "Send_a_success_email": {
                      "inputs": {
                        "body": {
                          "Body": "<p>Processed @{variables('structuringSummary')['processed']} trials.<br>\nFailed @{variables('structuringSummary')['failed']} trials.<br>\nStructuring process time - @{triggerBody()?['TimePassed']}<br>\nStructuring build version - @{triggerBody()?['BuildVersion']}<br>\n</p>",
                          "Subject": "[concat('[', parameters('serviceName'), '] ', 'Trials updating process finished successfully')]",
                          "To": "[parameters('accountId')]"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['office365']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/v2/Mail"
                      },
                      "runAfter": {
                        "Swap_gateway_slot": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection"
                    },
                    "Swap_gateway_slot": {
                      "inputs": {
                        "body": "@variables('slotSwapBody')",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['arm']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "[concat('/subscriptions/@{encodeURIComponent(''',subscription().subscriptionId,''')}/resourcegroups/@{encodeURIComponent(''',resourceGroup().name,''')}/providers/@{encodeURIComponent(''Microsoft.Web'')}/@{encodeURIComponent(''sites/',variables('gatewayWebAppName'),''')}/@{encodeURIComponent(''slotsswap'')}')]",
                        "queries": {
                          "x-ms-api-version": "2019-08-01"
                        }
                      },
                      "runAfter": {
                      },
                      "type": "ApiConnection"
                    }
                  },
                  "else": {
                    "actions": {
                      "Send_a_failure_email_": {
                        "inputs": {
                          "body": {
                            "Body": "<p>Failure message - Service Validation Failed.<br>\nStructuring process time - @{triggerBody()?['TimePassed']}<br>\nStructuring build version - @{triggerBody()?['BuildVersion']}<br>\n<br>\nDisqualifier readiness - @{if(startsWith(variables('readiness'),'Ready'),'Success','Failed')}: @{variables('readiness')}<br>\nFunctional Tests Run Result - @{if(equals(outputs('Run_Functional_Tests')?['statusCode'],200),'Success','Failed')}:<br>\n@{body('Run_Functional_Tests')}<br>\n<br>\nGateway slot not swapped.</p>",
                            "Subject": "[concat('[', parameters('serviceName'), '] ', 'Trials updating process failed to complete')]",
                            "To": "[parameters('accountId')]"
                          },
                          "host": {
                            "connection": {
                              "name": "@parameters('$connections')['office365']['connectionId']"
                            }
                          },
                          "method": "post",
                          "path": "/v2/Mail"
                        },
                        "runAfter": {
                        },
                        "type": "ApiConnection"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                        {
                            "startsWith": [
                                "@variables('readiness')",
                                "Ready"
                            ]
                        },
                        {

                            "equals": [
                                "@outputs('Run_Functional_Tests')?['statusCode']",
                                200
                            ]
                        }
                      ]
                  },
                  "runAfter": {
                    "Run_Functional_Tests": [
                      "Succeeded",
                      "Failed",
                      "TimedOut",
                      "Skipped"
                    ]
                  },
                  "type": "If"
                },
                "Restart_disqualifier_service": {
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['arm']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "[concat('/subscriptions/@{encodeURIComponent(''',subscription().subscriptionId,''')}/resourcegroups/@{encodeURIComponent(''',resourceGroup().name,''')}/providers/@{encodeURIComponent(''Microsoft.Web'')}/@{encodeURIComponent(concat(''sites/'', variables(''disqualifierSecondaryService'')))}/@{encodeURIComponent(''restart'')}')]",
                    "queries": {
                      "x-ms-api-version": "2019-08-01"
                    }
                  },
                  "runAfter": {
                    "Set_disqualifierSecondaryService_variable": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiConnection"
                },
                 "Run_Functional_Tests": {
                    "runAfter": {
                        "Until_disqualifier_is_ready": [
                            "Succeeded"
                        ]
                    },
                    "type": "Http",
                    "inputs": {
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "method": "GET",
                        "queries": {
                            "name": "finisher-logic-app",
                            "timeout": "50000",
                            "url": "[parameters('functionalTestsFileUrl')]"
                        },
                        "uri": "[concat('https://', variables('funcTestsAppName'),'.azurewebsites.net/suite')]"
                    }
                },
                "Set_disqualifierSecondaryService_variable": {
                  "inputs": {
                    "name": "disqualifierSecondaryService",
                    "value": "@{concat(variables('disqualifierService'), variables('servicePostfix'))}"
                  },
                  "runAfter": {
                  },
                  "type": "SetVariable"
                },
                "Until_disqualifier_is_ready": {
                  "actions": {
                    "Delay_readiness_polling": {
                      "inputs": {
                        "interval": {
                          "count": 5,
                          "unit": "Second"
                        }
                      },
                      "runAfter": {
                        "Set_readiness_variable": [
                          "Succeeded"
                        ]
                      },
                      "type": "Wait"
                    },
                    "Get_disqualifier_readiness": {
                      "inputs": {
                        "method": "GET",
                        "uri": "[concat('@{concat(''https://'',''', variables('gatewayWebAppName'), ''', variables(''serviceSecondaryGatewayPostfix''), ''.azurewebsites.net/disq/ready'')}')]"
                      },
                      "runAfter": {
                      },
                      "type": "Http"
                    },
                    "Set_readiness_variable": {
                      "inputs": {
                        "name": "readiness",
                        "value": "@{body('Get_disqualifier_readiness')}"
                      },
                      "runAfter": {
                        "Get_disqualifier_readiness": [
                          "Succeeded"
                        ]
                      },
                      "type": "SetVariable"
                    }
                  },
                  "expression": "@startsWith(variables('readiness'), 'Ready')",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "runAfter": {
                    "Wait_for_restart_to_finish": [
                      "Succeeded"
                    ]
                  },
                  "type": "Until"
                },
                "Wait_for_restart_to_finish": {
                        "inputs": {
                            "interval": {
                                "count": 3,
                                "unit": "Minute"
                            }
                        },
                        "runAfter": {
                            "Restart_disqualifier_service": [
                                "Succeeded"
                            ]
                        },
                        "type": "wait"
                    }
              },
              "else": {
                "actions": {
                  "Send_a_failure_email": {
                    "inputs": {
                      "body": {
                        "Body": "<p>Failure message - @{triggerBody()?['FailureMessage']}<br>\nStructuring process time - @{triggerBody()?['TimePassed']}<br>\nStructuring build version - @{triggerBody()?['BuildVersion']}</p>",
                        "Subject": "[concat('[', parameters('serviceName'), '] ', 'Trials updating process failed to complete')]",
                        "To": "[parameters('accountId')]"
                      },
                      "host": {
                        "connection": {
                          "name": "@parameters('$connections')['office365']['connectionId']"
                        }
                      },
                      "method": "post",
                      "path": "/v2/Mail"
                    },
                    "runAfter": {
                    },
                    "type": "ApiConnection"
                  }
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@triggerBody()?['Success']",
                      true
                    ]
                  }
                ]
              },
              "runAfter": {
                "Stop_structuringSecondaryAci": [
                  "Succeeded"
                ]
              },
              "type": "If"
            },
            "Parse_Slot_Response": {
              "inputs": {
                "content": "@body('Get_Staging_slot')",
                "schema": {
                  "properties": {
                    "slot": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "runAfter": {
                "Get_Staging_slot": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson"
            },
            "Set_servicePostfix": {
              "inputs": {
                "name": "servicePostfix",
                "value": "@{if(equals(body('Parse_Slot_Response')?['slot'], 'primary'), '-s', '')}"
              },
              "runAfter": {
                "Parse_Slot_Response": [
                  "Succeeded"
                ]
              },
              "type": "SetVariable"
            },
            "Set_serviceSecondaryGatewayPostfix": {
                "inputs": {
                    "variables": [
                        {
                            "name": "serviceSecondaryGatewayPostfix",
                            "type": "string",
                            "value": "@{if(equals(body('Parse_Slot_Response')?['slot'], 'primary'), '-secondary', '')}"
                        }
                    ]
                },
                "runAfter": {
                    "Set_servicePostfix": [
                        "Succeeded"
                    ]
                },
                "type": "InitializeVariable"
            },
            "Set_structuringSecondaryAci_variable": {
              "inputs": {
                "name": "structuringSecondaryAci",
                "value": "@{concat(variables('structuringAci'), variables('servicePostfix'))}"
              },
              "runAfter": {
                "Set_serviceSecondaryGatewayPostfix": [
                  "Succeeded"
                ]
              },
              "type": "SetVariable"
            },
            "Stop_structuringSecondaryAci": {
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['arm']['connectionId']"
                  }
                },
                "method": "post",
                "path": "[concat('/subscriptions/@{encodeURIComponent(''',subscription().subscriptionId,''')}/resourcegroups/@{encodeURIComponent(''',resourceGroup().name,''')}/providers/@{encodeURIComponent(''Microsoft.ContainerInstance'')}/@{encodeURIComponent(concat(''containerGroups/'', variables(''structuringSecondaryAci'')))}/@{encodeURIComponent(''stop'')}')]",
                "queries": {
                  "x-ms-api-version": "2018-10-01"
                }
              },
              "runAfter": {
                "Set_structuringSecondaryAci_variable": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection"
            }
          },
          "outputs": {
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "arm": {
                "connectionId": "[variables('connections_arm_externalid')]",
                "connectionName": "arm",
                "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', resourceGroup().location,'/managedApis/arm')]"
              },
              "office365": {
                "connectionId": "[variables('connections_office365_externalid')]",
                "connectionName": "office365",
                "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/', resourceGroup().location,'/managedApis/office365')]"
              }
            }
          }
        }
      }
    }
  ],
  "outputs": {
  }
}